#[include klacros.cfg]

[gcode_macro _START_PRINT]
gcode:
  # Pass parameters from slicer
  {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(170)|float %}
  {% set FILAMENT = params.FILAMENT|default(PLA) %}
  
  G90                                         # use absolute coordinates
  M83                                         # extruder relative mode

  SET_LED LED=my_neopixel red=.3 green=0 blue=0 white=0 index=3
  SET_LED LED=my_neopixel red=.3 green=0 blue=0 white=0 index=4

  PID_PROFILE LOAD={FILAMENT} HEATER=extruder # load filament pid tune
  
  M140 S{BED_TEMP}                            # set final bed temp
  M104 S150                                   # set temporary nozzle temp to prevent oozing during homing and auto bed leveling
  M190 S{BED_TEMP}                            # wait for bed temp to stabilize
  G4 S10                                      # allow partial nozzle warmup

  SET_LED LED=my_neopixel red=0 green=0 blue=.3 white=0 index=3
  SET_LED LED=my_neopixel red=0 green=0 blue=.3 white=0 index=4
  
  SET_SKEW CLEAR=1                            #Clear Skew correction

  #SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0     # Turn off auto probe attachment
  #SET_KINEMATIC_POSITION Z=0
  #G28 XY
  #ATTACH_PROBE                                # Explicitly attach the probe
  G28                                          # Home all axis
  BED_MESH_CALIBRATE ADAPTIVE=1                # Create a bed mesh
  #DETACH_PROBE                                # Manually detach the probe
  #SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1     # Make sure the probe is attached in future

  SET_LED LED=my_neopixel red=0 green=.3 blue=0 white=0 index=3
  SET_LED LED=my_neopixel red=0 green=.3 blue=0 white=0 index=4

  M104 S{EXTRUDER_TEMP}                       # set final nozzle temp
  M109 S{EXTRUDER_TEMP}                       # wait for nozzle temp to stabilize

  KOMB                                        # Clean nozzle

  SET_LED LED=my_neopixel red=0.05 green=0.05 blue=0.05 white=0.05 index=3
  SET_LED LED=my_neopixel red=0.05 green=0.05 blue=0.05 white=0.05 index=4

  SKEW_PROFILE LOAD=my_skew_profile           #Apply Skew correction
  GET_CURRENT_SKEW                            #Display currect Skew
  LINE_PURGE                                  #Filament purge then begin print

[gcode_macro _END_PRINT]
gcode:
  G91 # Relative positioning
  G1 E-2 F2700 # Retract a bit
  G1 E-2 Z0.2 F2400 # Retract and raise Z
  G1 X5 Y5 F3000 # Wipe out
  G1 Z5 # Raise Z more
  G90 # Absolute positioning

  G1 X5 Y190 F12000 # present print
  M140 S0 # turn off heatbed
  M104 S0 # turn off temperature
  M107 # turn off fan
  M84 # disable motors

  SET_SKEW CLEAR=1

  SET_LED LED=my_neopixel red=0 green=0 blue=0 white=0 index=3
  SET_LED LED=my_neopixel red=0 green=0 blue=0 white=0 index=4


# Cancel object (aka Marlin/RRF M486 commands) support

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

###############
# My Macros #
###############
[pause_resume]

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 117.5   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 210.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 10.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 1.0   ; the value to retract while PAUSE
variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0  ; retract speed in mm/s
variable_unretract       : 1.0   ; the value to unretract while RESUME
variable_speed_unretract : 35.0  ; unretract speed in mm/s
variable_speed_hop       : 15.0  ; z move speed in mm/s
variable_speed_move      : 100.0 ; move speed in mm/s
variable_park_at_cancel  : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
gcode:

## After you uncomment it add your custom values

## You now can use your PAUSE macro direct in your M600 here a short example:

[gcode_macro M600]
description: Filament change
gcode: PAUSE X=117.5 Y=0 Z_MIN=50